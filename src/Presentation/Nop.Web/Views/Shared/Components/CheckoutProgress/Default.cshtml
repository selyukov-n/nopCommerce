@model CheckoutProgressModel
@{
    void Item(CheckoutProgressStep step, string routeName, object caption)
    {
        var reachable = step <= Model.CheckoutProgressStep;
        var className = reachable ? "active-step" : "inactive-step";
        var href = Model.CheckoutProgressStep == CheckoutProgressStep.Complete || !reachable ? null : Url.RouteUrl(routeName);

        <li class="@className">
            <a href="@href">@caption</a>
        </li>
    }
} 
<div class="order-progress">
    <ul>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutProgressBefore })
        @{
            Item(CheckoutProgressStep.Cart, "ShoppingCart", T("Checkout.Progress.Cart"));
            Item(CheckoutProgressStep.Address, "CheckoutBillingAddress", T("Checkout.Progress.Address"));
            Item(CheckoutProgressStep.Shipping, "CheckoutShippingMethod", T("Checkout.Progress.Shipping"));
            Item(CheckoutProgressStep.Payment, "CheckoutPaymentMethod", T("Checkout.Progress.Payment"));
            Item(CheckoutProgressStep.Confirm, "CheckoutConfirm", T("Checkout.Progress.Confirm"));
            Item(CheckoutProgressStep.Complete, null, T("Checkout.Progress.Complete"));
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutProgressAfter })
    </ul>
</div>
